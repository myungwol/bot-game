# bot-game/cogs/systems/JobAndTierHandler.py

import discord
from discord.ext import commands
from discord import ui
import logging
import asyncio
from typing import Dict, Any, List

# [‚úÖ‚úÖ‚úÖ ÌïµÏã¨ ÏàòÏ†ï] get_embed_from_dbÎ•º import Î™©Î°ùÏóê Ï∂îÍ∞ÄÌï©ÎãàÎã§.
from utils.database import supabase, get_config, get_id, get_embed_from_db
from utils.game_config_defaults import JOB_SYSTEM_CONFIG, JOB_ADVANCEMENT_DATA
from utils.helpers import format_embed_from_db

logger = logging.getLogger(__name__)

class JobAdvancementView(ui.View):
    def __init__(self, bot: commands.Bot, user_id: int, jobs: List[Dict[str, Any]], level: int):
        super().__init__(timeout=None)
        self.bot = bot
        self.user_id = user_id
        self.jobs_data = {job['job_key']: job for job in jobs}
        self.level = level
        
        self.selected_job_key: str | None = None
        self.selected_ability_key: str | None = None
        
        self.build_components()

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("Ëá™ÂàÜÂ∞ÇÁî®„ÅÆ„É°„Éã„É•„Éº„Åß„Åô„ÄÇ", ephemeral=True)
            return False
        return True

    def build_components(self):
        self.clear_items()

        job_options = []
        is_job_disabled = True
        if self.jobs_data:
            job_options = [
                discord.SelectOption(label=job['job_name'], value=job['job_key'], description=job['description'][:100])
                for job in self.jobs_data.values()
            ]
            is_job_disabled = False
        else:
            job_options.append(discord.SelectOption(label="ÈÅ∏Êäû„Åß„Åç„ÇãËÅ∑Ê•≠„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ", value="no_jobs_available", default=True))
        
        job_select = ui.Select(placeholder="‚ë† „Åæ„Åö„ÅØËÅ∑Ê•≠„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ...", options=job_options, custom_id="job_adv_job_select", disabled=is_job_disabled)
        if self.selected_job_key:
            job_select.placeholder = self.jobs_data[self.selected_job_key]['job_name']
        job_select.callback = self.on_job_select
        self.add_item(job_select)

        ability_options = []
        is_ability_disabled = True
        ability_placeholder = "ÂÖà„Å´ËÅ∑Ê•≠„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"

        if self.selected_job_key and self.selected_job_key in self.jobs_data:
            is_ability_disabled = False
            ability_placeholder = "‚ë° Ê¨°„Å´ËÉΩÂäõ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ..."
            selected_job = self.jobs_data[self.selected_job_key]
            for ability in selected_job.get('abilities', []):
                ability_options.append(
                    discord.SelectOption(label=ability['ability_name'], value=ability['ability_key'], description=ability['description'][:100])
                )
        
        if not ability_options:
            ability_options.append(discord.SelectOption(label="...", value="no_abilities_placeholder", default=True))

        ability_select = ui.Select(placeholder=ability_placeholder, options=ability_options, disabled=is_ability_disabled, custom_id="job_adv_ability_select")
        if self.selected_ability_key:
            selected_job = self.jobs_data[self.selected_job_key]
            ability_name = next((a['ability_name'] for a in selected_job['abilities'] if a['ability_key'] == self.selected_ability_key), "ËÉΩÂäõ„ÇíÈÅ∏Êäû")
            ability_select.placeholder = ability_name
        ability_select.callback = self.on_ability_select
        self.add_item(ability_select)

        is_confirm_disabled = not (self.selected_job_key and self.selected_ability_key)
        confirm_button = ui.Button(label="Á¢∫ÂÆö„Åô„Çã", style=discord.ButtonStyle.success, disabled=is_confirm_disabled, custom_id="job_adv_confirm")
        confirm_button.callback = self.on_confirm
        self.add_item(confirm_button)

    async def on_job_select(self, interaction: discord.Interaction):
        if interaction.data['values'][0] == "no_jobs_available":
            return await interaction.response.defer()
        
        self.selected_job_key = interaction.data['values'][0]
        self.selected_ability_key = None
        
        self.build_components()
        await interaction.response.edit_message(view=self)

    async def on_ability_select(self, interaction: discord.Interaction):
        if interaction.data['values'][0] == "no_abilities_placeholder":
            return await interaction.response.defer()

        # [ÏàòÏ†ï] Îä•Î†• ÏÑ†ÌÉù Ïãú ÏßÅÏóÖ ÏÑ†ÌÉù ÏÉÅÌÉúÎ•º ÏûÉÏßÄ ÏïäÎèÑÎ°ù ÏàòÏ†ï
        job_select = discord.utils.get(self.children, custom_id='job_adv_job_select')
        if not job_select or not job_select.values or job_select.values[0] == 'no_jobs_available':
             await interaction.response.send_message("ÂÖà„Å´ËÅ∑Ê•≠„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ", ephemeral=True)
             return
        self.selected_job_key = job_select.values[0]

        self.selected_ability_key = interaction.data['values'][0]
        
        self.build_components()
        await interaction.response.edit_message(view=self)


    async def on_confirm(self, interaction: discord.Interaction):
        await interaction.response.defer()

        if not (self.selected_job_key and self.selected_ability_key):
            await interaction.followup.send("ËÅ∑Ê•≠„Å®ËÉΩÂäõ„ÅÆ‰∏°Êñπ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ", ephemeral=True)
            return

        for item in self.children: item.disabled = True
        await interaction.edit_original_response(content="„Åó„Å∞„Çâ„Åè„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ...", embed=None, view=self)
        self.stop()

        try:
            user = await interaction.guild.fetch_member(self.user_id)
            if not user: raise Exception("Ïú†Ï†ÄÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")

            selected_job_data = self.jobs_data[self.selected_job_key]
            selected_ability_data = next(a for a in selected_job_data['abilities'] if a['ability_key'] == self.selected_ability_key)

            job_res = await supabase.table('jobs').select('id').eq('job_key', self.selected_job_key).single().execute()
            ability_res = await supabase.table('abilities').select('id').eq('ability_key', self.selected_ability_key).single().execute()

            if not (job_res.data and ability_res.data):
                raise Exception(f"DBÏóêÏÑú ÏßÅÏóÖ ÎòêÎäî Îä•Î†• IDÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. (job: {self.selected_job_key}, ability: {self.selected_ability_key})")
            
            job_id = job_res.data['id']
            ability_id = ability_res.data['id']
            
            job_role_key = selected_job_data['role_key']
            all_job_role_keys = list(JOB_SYSTEM_CONFIG.get("JOB_ROLE_MAP", {}).values())
            
            roles_to_remove = [role for key in all_job_role_keys if (role_id := get_id(key)) and (role := interaction.guild.get_role(role_id)) and role in user.roles and key != job_role_key]
            if roles_to_remove: await user.remove_roles(*roles_to_remove, reason="Ï†ÑÏßÅÏúºÎ°ú Ïù∏Ìïú Ïù¥Ï†Ñ ÏßÅÏóÖ Ïó≠Ìï† Ï†úÍ±∞")

            if new_role_id := get_id(job_role_key):
                if new_role := interaction.guild.get_role(new_role_id):
                    await user.add_roles(new_role, reason="Ï†ÑÏßÅ ÏôÑÎ£å")

            await supabase.rpc('set_user_job_and_ability', {'p_user_id': user.id, 'p_job_id': job_id, 'p_ability_id': ability_id}).execute()

            if log_channel_id := get_id("job_log_channel_id"):
                if log_channel := self.bot.get_channel(log_channel_id):
                    if embed_data := await get_embed_from_db("log_job_advancement"):
                        log_embed = format_embed_from_db(embed_data, user_mention=user.mention, job_name=selected_job_data['job_name'], ability_name=selected_ability_data['ability_name'])
                        if user.display_avatar: log_embed.set_thumbnail(url=user.display_avatar.url)
                        await log_channel.send(embed=log_embed)

            await interaction.edit_original_response(content=f"üéâ **Ëª¢ËÅ∑ÂÆå‰∫ÜÔºÅ**\n„Åä„ÇÅ„Åß„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅ„ÅÇ„Å™„Åü„ÅØ **{selected_job_data['job_name']}** „Å´„Å™„Çä„Åæ„Åó„Åü„ÄÇ", view=None)
            await asyncio.sleep(15)
            if isinstance(interaction.channel, discord.Thread): await interaction.channel.delete()
        except Exception as e:
            logger.error(f"Ï†ÑÏßÅ Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò Î∞úÏÉù (Ïú†Ï†Ä: {self.user_id}): {e}", exc_info=True)
            await interaction.edit_original_response(content="‚ùå Ëª¢ËÅ∑Âá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇÁÆ°ÁêÜËÄÖ„Å´„ÅäÂïè„ÅÑÂêà„Çè„Åõ„Åè„Å†„Åï„ÅÑ„ÄÇ", view=None)

class StartAdvancementView(ui.View):
    def __init__(self, bot: commands.Bot, user_id: int, jobs: List[Dict[str, Any]], level: int):
        super().__init__(timeout=None)
        self.bot = bot
        self.user_id = user_id
        self.jobs_data = jobs
        self.level = level
        self.start_button.custom_id = f"start_advancement_{self.user_id}_{self.level}"

    @ui.button(label="Ëª¢ËÅ∑„ÇíÈñãÂßã„Åô„Çã", style=discord.ButtonStyle.primary, emoji="‚ú®")
    async def start_button(self, interaction: discord.Interaction, button: ui.Button):
        self.stop()
        
        embed = discord.Embed(
            title=f"ËÅ∑Ê•≠„ÉªËÉΩÂäõÈÅ∏Êäû („É¨„Éô„É´{self.level})",
            description="Ëª¢ËÅ∑„Åó„Åü„ÅÑËÅ∑Ê•≠„Å®„Åù„ÅÆËÉΩÂäõ„Çí‰∏Ä„Å§„Åö„Å§ÈÅ∏Êäû„Åó„ÄÅ‰∏ã„ÅÆ„ÄåÁ¢∫ÂÆö„Åô„Çã„Äç„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
            color=0xFFD700
        )
        for job in self.jobs_data:
            ability_texts = [f"> **{ability['ability_name']}**: {ability['description']}" for ability in job.get('abilities', [])]
            embed.add_field(name=f"„Äê{job['job_name']}„Äë", value=f"```{job['description']}```\n" + "\n".join(ability_texts), inline=False)
        
        view = JobAdvancementView(self.bot, interaction.user.id, self.jobs_data, self.level)
        await interaction.response.edit_message(embed=embed, view=view)
        self.bot.add_view(view)

class JobAndTierHandler(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.active_views_loaded = False
        logger.info("JobAndTierHandler Cog (Ï†ÑÏßÅ/Îì±Í∏â Ï≤òÎ¶¨)Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.")
        
    @commands.Cog.listener()
    async def on_ready(self):
        if self.active_views_loaded: return
        
        logger.info("Ïù¥Ï†ÑÏóê ÌôúÏÑ±ÌôîÎêú Ï†ÑÏßÅ ViewÎì§ÏùÑ Îã§Ïãú Î°úÎìúÌï©ÎãàÎã§...")
        channel_id = get_id("job_advancement_channel_id")
        if not (channel_id and (channel := self.bot.get_channel(channel_id))):
            logger.warning("Ï†ÑÏßÅÏÜå Ï±ÑÎÑêÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏñ¥ ÌôúÏÑ± ViewÎ•º Î°úÎìúÌï† Ïàò ÏóÜÏäµÎãàÎã§.")
            self.active_views_loaded = True
            return

        active_threads = channel.threads
        try:
            archived_threads = [t async for t in channel.archived_threads(limit=None)]
            active_threads.extend(archived_threads)
        except Exception as e:
            logger.error(f"ÏïÑÏπ¥Ïù¥Î∏åÎêú Ïä§Î†àÎìúÎ•º Í∞ÄÏ†∏Ïò§Îäî Ï§ë Ïò§Î•ò: {e}")

        for thread in active_threads:
            try:
                if not thread.name.startswith("Ëª¢ËÅ∑ÔΩú"): continue
                
                owner_id = thread.owner_id
                if not owner_id: continue

                async for message in thread.history(limit=5, oldest_first=True):
                    if message.author.id == self.bot.user.id and message.components:
                        comp = message.components[0].children[0]
                        if isinstance(comp, discord.Button) and comp.custom_id and comp.custom_id.startswith("start_advancement_"):
                            level = int(comp.custom_id.split('_')[-1])
                            advancement_data = JOB_ADVANCEMENT_DATA.get(level, [])
                            view = StartAdvancementView(self.bot, owner_id, advancement_data, level)
                            self.bot.add_view(view, message_id=message.id)
                            logger.info(f"'{thread.name}' Ïä§Î†àÎìúÏóêÏÑú StartAdvancementViewÎ•º Îã§Ïãú Î°úÎìúÌñàÏäµÎãàÎã§.")
                        elif isinstance(comp, discord.ui.Select) and comp.custom_id == "job_adv_job_select":
                            # TODO: JobAdvancementView Î≥µÍµ¨ Î°úÏßÅ (ÌïÑÏöî Ïãú Íµ¨ÌòÑ)
                            pass
                        break
            except Exception as e:
                logger.error(f"Ïä§Î†àÎìú '{thread.name}'Ïùò ViewÎ•º Îã§Ïãú Î°úÎìúÌïòÎäî Ï§ë Ïò§Î•ò Î∞úÏÉù: {e}", exc_info=True)
        
        self.active_views_loaded = True
        logger.info("ÌôúÏÑ± Ï†ÑÏßÅ View Î°úÎìúÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.")

    async def start_advancement_process(self, member: discord.Member, level: int):
        try:
            channel_id = get_id("job_advancement_channel_id")
            if not (channel_id and (channel := self.bot.get_channel(channel_id))):
                logger.error(f"Ï†ÑÏßÅÏÜå Ï±ÑÎÑê(job_advancement_channel_id)Ïù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÍ±∞ÎÇò Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
                return

            if any(thread.name == f"Ëª¢ËÅ∑ÔΩú{member.name}" for thread in channel.threads):
                logger.warning(f"{member.name}ÎãòÏùò Ï†ÑÏßÅ Ïä§Î†àÎìúÍ∞Ä Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÏó¨ ÏÉùÏÑ±ÏùÑ Í±¥ÎÑàÎúÅÎãàÎã§.")
                return

            user_job_res = await supabase.table('user_jobs').select('jobs(job_key)').eq('user_id', member.id).maybe_single().execute()
            current_job_key = user_job_res.data['jobs']['job_key'] if user_job_res and user_job_res.data and user_job_res.data.get('jobs') else None

            all_advancement_jobs = JOB_ADVANCEMENT_DATA.get(level, [])
            filtered_jobs = [job_info for job_info in all_advancement_jobs if not (prerequisite := job_info.get("prerequisite_job")) or prerequisite == current_job_key]

            if not filtered_jobs:
                if level >= 100 and not current_job_key:
                    logger.warning(f"{member.name}ÎãòÏùÄ 1Ï∞® Ï†ÑÏßÅÏùÑ ÌïòÏßÄ ÏïäÏïÑ 2Ï∞® Ï†ÑÏßÅÏùÑ ÏßÑÌñâÌï† Ïàò ÏóÜÏäµÎãàÎã§.")
                    try: await member.send(f"„É¨„Éô„É´{level}Ëª¢ËÅ∑„ÅÆ„ÅîÊ°àÂÜÖ\n2Ê¨°Ëª¢ËÅ∑„ÅÆ„Åü„ÇÅ„Å´„ÅØ„ÄÅ„Åæ„Åö„É¨„Éô„É´50„ÅÆËª¢ËÅ∑„ÇíÂÆå‰∫Ü„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ")
                    except discord.Forbidden: pass
                else: logger.warning(f"{member.name} (ÌòÑÏû¨ ÏßÅÏóÖ: {current_job_key}) ÎãòÏùÑ ÏúÑÌïú Î†àÎ≤® {level} ÏÉÅÏúÑ ÏßÅÏóÖÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
                return

            thread = await channel.create_thread(name=f"Ëª¢ËÅ∑ÔΩú{member.name}", type=discord.ChannelType.private_thread, invitable=False)
            await thread.add_user(member)
            
            embed = discord.Embed(title=f"üéâ „É¨„Éô„É´{level}ÈÅîÊàêÔºÅËª¢ËÅ∑„ÅÆÊôÇÈñì„Åß„ÅôÔºÅ", description=f"{member.mention}„Åï„Çì„ÄÅÊñ∞„Åü„Å™ÈÅì„Å∏ÈÄ≤„ÇÄÊôÇ„ÅåÊù•„Åæ„Åó„Åü„ÄÇ\n\n‰∏ã„ÅÆ„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„ÄÅËª¢ËÅ∑ÊâãÁ∂ö„Åç„ÇíÈñãÂßã„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ", color=0xFFD700)
            
            view = StartAdvancementView(self.bot, member.id, filtered_jobs, level)
            await thread.send(embed=embed, view=view)
            
            self.bot.add_view(view)
            logger.info(f"{member.name}ÎãòÏùò Î†àÎ≤® {level} Ï†ÑÏßÅ Ïä§Î†àÎìúÎ•º ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÌïòÍ≥† ViewÎ•º Îì±Î°ùÌñàÏäµÎãàÎã§.")
        except Exception as e:
            logger.error(f"{member.name}ÎãòÏùò Ï†ÑÏßÅ Ï†àÏ∞® ÏãúÏûë Ï§ë Ïò§Î•ò Î∞úÏÉù: {e}", exc_info=True)

    async def update_tier_role(self, member: discord.Member, level: int):
        try:
            guild = member.guild
            tier_roles_config = sorted(JOB_SYSTEM_CONFIG.get("LEVEL_TIER_ROLES", []), key=lambda x: x['level'], reverse=True)
            
            target_role_key = next((tier['role_key'] for tier in tier_roles_config if level >= tier['level']), None)
            if not target_role_key: return

            all_tier_role_ids = {get_id(tier['role_key']) for tier in tier_roles_config if get_id(tier['role_key'])}
            target_role_id = get_id(target_role_key)

            roles_to_add = []
            roles_to_remove = []

            if target_role_id and not member.get_role(target_role_id):
                if role_obj := guild.get_role(target_role_id):
                    roles_to_add.append(role_obj)
            
            for role in member.roles:
                if role.id in all_tier_role_ids and role.id != target_role_id:
                    roles_to_remove.append(role)
            
            if roles_to_add: await member.add_roles(*roles_to_add, reason="Î†àÎ≤® Îã¨ÏÑ± Îì±Í∏â Ïó≠Ìï† Î∂ÄÏó¨")
            if roles_to_remove: await member.remove_roles(*roles_to_remove, reason="Î†àÎ≤® Î≥ÄÍ≤Ω Îì±Í∏â Ïó≠Ìï† Ï†úÍ±∞")

        except Exception as e:
            logger.error(f"{member.name}ÎãòÏùò Îì±Í∏â Ïó≠Ìï† ÏóÖÎç∞Ïù¥Ìä∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò: {e}", exc_info=True)

async def setup(bot: commands.Bot):
    await bot.add_cog(JobAndTierHandler(bot))
